def check_outliers(df,column_name):
    lower = df[column_name].mean() - 3 * df[column_name].std()
    upper = df[column_name].mean() + 3 * df[column_name].std()
    outlier_count = df[(df[column_name] < lower) | (df[column_name] > upper)].shape[0]
    if outlier_count > 0:
        return True
    else:
        return False

def remove_outliers(df,column_name):
    lower = df[column_name].mean() - 3 * df[column_name].std()
    upper = df[column_name].mean() + 3 * df[column_name].std()
    if(check_outliers(df, column_name)):
        df[column_name]=df[(df[column_name] > lower) | (df[column_name] < upper)]
        print("Outliers Removeed Successfully")
    else:
        print("No Outliers. No need of removal")

#################################################################################
def remove_outlier(df1 , col):
    Q1 = df1[col].quantile(0.25)
    Q3 = df1[col].quantile(0.75)
    IQR = Q3 - Q1
    lower_whisker = Q1-1.5*IQR
    upper_whisker = Q3+1.5*IQR
    df[col] = np.clip(df1[col] , lower_whisker , upper_whisker)
    return df1

def treat_outliers_all(df1 , col_list):
    for c in col_list:
        df1 = remove_outlier(df , c)
    return df1